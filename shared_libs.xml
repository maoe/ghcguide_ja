<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="using-shared-libs">
  <title>共有ライブラリを使う</title>
  <indexterm><primary>Shared libraries</primary><secondary>using</secondary></indexterm>
  <indexterm><primary>Dynamic libraries</primary><secondary>using</secondary></indexterm>

  <para>一部のプラットフォームでは、GHCはHaskellコードをビルドして共有ライブラリを作ることに対応している。共有ライブラリは動的(dynamic)ライブラリと言われることもある。特に、Windowsではダイナミックリンクライブラリ(DLL)と呼ばれる。
  </para>

  <para>共有ライブラリは、あるコンパイル済みコードの一つのインスタンスを複数のプログラムで共有することを可能にする。対照的に、静的リンクの場合はコードが各プログラムにコピーされる。このため、共有ライブラリを使うことがディスク領域の節約になることがある。また、あるコードを使う複数のプログラムの間で、メモリ上に置かれたそのコードの単一のコピーを共有することも可能になる。共有ライブラリは、大きなプロジェクトで、特に部分ごとに異なるプログラミング言語で書かれる場合に、プロジェクトを構造化する方法として使われることもしばしばある。また、共有ライブラリは、色々なアプリケーションでプラグイン機構としても広く使われている。これは特にWindowsにおいて、COMを使って広く行なわれている。
  </para>

  <para>GHCバージョン6.12において、共有ライブラリをビルドすることに対応しているのは、x86およびx86-64アーキテクチャ上のLinuxであり、Windowsでは部分的に対応している(<xref linkend="win32-dlls"/>を見よ)。Windowsでの対応では、現在のところ、Haskellのそれぞれのパッケージを別個のDLLとしてビルドすることができず、一つのHaskellプログラム全体を一つの大きなDLLとしてリンクすることしかできないという点が重大な違いである。
  </para>

  <para>共有ライブラリをビルドしたり使ったりするのは、静的ライブラリをビルドしたり使ったりするのにくらべてやや複雑である。Cabalを使う場合は、この詳細の大部分は隠され、パッケージのconfigure時に<literal>--enable-shared</literal>を使うだけで、そのパッケージを共有ライブラリとしてビルドしたり、共有ライブラリとしてビルドされた他のパッケージとリンクさせたりできる。コードをビルドするときの込み入った点は、そのコードが共有ライブラリで使われるのか、それとも、依存する外部パッケージの共有ライブラリ版を使うのかを区別する必要があることである。共有ライブラリを使う共有ライブラリや、共有ライブラリを使うプログラムをインストールしたり配布したりするときの込み入った点は、必要な共有ライブラリが全て実行時に適切な場所にあることを保証する必要があることである。
  </para>

  <sect2>
    <title>共有ライブラリを使うようにプログラムをビルドする</title>
    <para>単純なプログラムを、ランタイムシステムと基本ライブラリ群(base libraries)について共有ライブラリを使うようにビルドするには、<literal>-dynamic</literal>フラグを使えばよい。
<programlisting>
ghc --make -dynamic Main.hs
</programlisting>
      これには二つの効果がある。第一に、共有ライブラリ版の(baseなどの)Haskellパッケージコードにリンクできるようにコードをコンパイルする。第二に、リンク時において、パッケージの、静的版でなく共有版のライブラリをリンクする。これには明らかに、これらのパッケージが共有ライブラリ付きでビルドされている必要がある。対応プラットフォームでは全ての中核パッケージの共有ライブラリがGHCに付属しているが、それ以外のパッケージを(例えばCabalで)インストールするなら、それらも共有ライブラリ付きでビルド(Cabalなら<literal>--enable-shared</literal>)しなければならないだろう。
    </para>
  </sect2>

  <sect2>
    <title>Haskellパッケージの共有ライブラリ</title>
    <para>Haskellコードをビルドして共有ライブラリにし、他のHaskellプログラムから使えるパッケージを作ることができる。最も簡単な方法はCabalを使うことで、Cabalパッケージを<literal>--enalbe-shared</literal>付きでconfigureするだけでよい。
    </para>
    <para>この手順を手動で行いたいか、あるいは独自のビルドシステムを書いているなら、いくつかの規約に従わねばならない。Haskellコードをエクスポートする共有ライブラリを、他のHaskellコードから使うためにビルドするのは、CのAPIをエクスポートし、Cのコードから使われる共有ライブラリをビルドするのに比べて少々複雑である。間違えると、通常リンクエラーが待っている。
    </para>
    <para>まず、Haskell共有ライブラリはパッケージに入って<emphasis>いなければならない</emphasis>。どの共有ライブラリにどのモジュールが入るかを自由に割り振ることはできない。Haskell共有ライブラリはパッケージ境界に対応していなければならない。パッケージを使うときにGHCが期待する慣習は、大部分<xref linkend="building-packages"/>に書かれている。
    </para>
    <para>GHCは、同じ共有ライブラリ(あるいは実行可能バイナリ本体)の<emphasis>中での</emphasis>シンボルへの参照と、異る共有ライブラリの<emphasis>間の</emphasis>シンボルへの参照を別に扱う。インポートするそれぞれのモジュールについて、GHCはそれが局所的に(同じ共有ライブラリの中に)あるのか、それとも別の共有ライブラリにあるのかを知る必要がある。これを知るためにパッケージが使われる。<literal>-dynamic</literal>を使っている場合、別パッケージのモジュールは別の共有ライブラリにあると仮定され、同じパッケージ(あるいはデフォルトの「main」パッケージ)にあるモジュールは同じ共有ライブラリ(あるいは実行ファイル本体)にあると仮定される。
   </para>
    <para>パッケージを使うときにGHCが期待する慣習は、大部分<xref linkend="building-packages"/>に書かれている。加えて、GHCは<literal>.hi</literal>ファイルの拡張子が<literal>.dyn_hi</literal>であることを期待するのに注意。これ以外の要求事項はCライブラリの場合と同じであり、以下に記述されている。特に、<literal>-dynamic</literal>、<literal>-fPIC</literal>、<literal>-shared</literal>の各フラグの使用である。
    </para>
  </sect2>

  <sect2>
    <title>CのAPIをエクスポートする共有ライブラリ</title>
    <para>Haskellコードを、より大きな多言語プロジェクトに含める場合、Haskellコードを一つの共有ライブラリにビルドするのは良い方法である。静的リンクの場合、最終リンクの段階をGHCに行わせることが推奨されるが、共有ライブラリでは、Haskellライブラリは他のあらゆる共有ライブラリとまったく同じように扱える。リンクは、通常のシステムのCコンパイラとリンカを使って行なえる。
    </para>
    <para>GHCによって生成された共有ライブラリは、Haskell以外で書かれた他のプログラムからロードすることができるので、プラグインとして使うのに適している。もちろん、プラグインを構築するには、FFIを使ってC関数をエクスポートし、RTSの初期化に関する規則を守らなければならない。<xref linkend="ffi-library"/>を見よ。特に、Haskellの関数が呼ばれる前にプラグインを初期化できるように、共有ライブラリからC関数をエクスポートする必要がおそらくあるだろう。
    </para>
    <para>CのAPIをエクスポートするHaskellモジュールを共有ライブラリへとビルドするには、<literal>-dynamic</literal>、<literal>-fPIC</literal>、<literal>-shared</literal>フラグを使う。
<programlisting>
ghc --make -dynamic -shared -fPIC Foo.hs -o libfoo.so
</programlisting>
      前と同じく、<literal>-dynamic</literal>フラグは、このライブラリがrtsおよびbaseパッケージの共有ライブラリ版にリンクされるように指定する。<literal>-fPIC</literal>は、最終的に共有ライブラリに入るあらゆるコードについて必要である。<literal>-shared</literal>フラグは、プログラムではなく共有ライブラリを作ることを指定する。より明快にするために、コンパイルとリンクの段階を別にしてみる。
<programlisting>
ghc -dynamic -fPIC -c Foo.hs
ghc -dynamic -shared Foo.o -o libfoo.so
</programlisting>
      原理的には、リンク時において、<literal>-dynamic</literal>なしに<literal>-shared</literal>を使うことが可能である。これは、rtsとすべての基本ライブラリとを、新しく作る共有ライブラリに対して静的にリンクするということである。これによって、極めて大きいものの単独動作する共有ライブラリが作られることになる。実際Windowsでは、-dynamicがまだ対応されていない(<xref linkend="win32-dlls"/>を見よ)ので、現在のところまさにこれを行うしかない。しかし、大部分のプラットフォームにおいては、これにはすべての静的ライブラリが、コードを共有ライブラリに含めることができるように<literal>-fPIC</literal>付きでビルドされていなければならない。しかし現時点で我々はそれを行なっていない。
    </para>
    <para>
      <emphasis>警告:</emphasis> 共有ライブラリがHaskellのAPIをエクスポートする場合、それを直接別のHaskellプログラムにリンクしてそのAPIを使うことはできない。リンクエラーが発生するだろう。そうでなく、上の節にあるようにパッケージに仕立てなければならない。
    </para>
  </sect2>

  <sect2 id="finding-shared-libs">
    <title>実行時における共有ライブラリの発見</title>
    <para>共有ライブラリを管理する上での最大の困難は、プログラムが実行時に必要なライブラリを見つけられるように諸々を配置することである。これがどのように働くかの詳細はプラットフォームによって異なる。特に、Unix ELF、Windows、Mac OS Xの三つの主要なプラットフォームである。
    </para>
    <para>Unixには二つの機構がある。共有ライブラリは、標準的な、動的リンカの知っている場所にインストールすることができる。例えば大部分のシステムでは<literal>/usr/lib</literal>か<literal>/usr/local/lib</literal>である。もう一つの機構は、プログラムやライブラリ自体に埋めこまれた「runtime path」(rpathともいう)を使うことである。このパスは、絶対パスであってもよいし、少くともLinuxとSolarisにおいてはプログラムやライブラリ自体からの相対パスでもよい。理論的には、これによって、プログラムとライブラリ群を合わせて、どこに置いても使えるようにまとめることができる。
    </para>
    <para>GHCには<literal>-dynload</literal>というリンク時フラグがあり、これを使って実行時に共有ライブラリを見つける方法を選択することができる。現在、次の三つの方法がある。
      <variablelist>
	<varlistentry>
	  <term>sysdep</term>
	  <listitem>
	    <para>システム依存の方式。デフォルトのモードでもある。Unix ELFシステムでは、これはrpathを共有ライブラリや実行ファイルに埋め込むことである。なかでも、rtsと各パッケージの共有ライブラリが見つかった場所への絶対パスを使う。従って、プログラムは即座に実行でき、必要なライブラリを発見できるはずである。一方、他のマシンで使う場合、そのマシンでライブラリが別の場所にインストールされているのであれば、この方法は適さないかもしれない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>deploy</term>
	  <listitem>
	    <para>この方式はランタイムパスを埋めこまない。共有ライブラリは、標準の場所か、あるいは環境変数<literal>LD_LIBRARY_PATH</literal>によって与えられたディレクトリに存在することが期待される。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>wrapped</term>
	  <listitem>
	    <para>この方式はラッパプログラムを生成し、このラッパプログラムがプログラム本体(同じディレクトリに.dynという拡張子付きで存在する)を呼ぶ。このとき、プログラム本体が必要な共有ライブラリを見つけられるような方法で呼ぶ。現在のことろこの方式はやや実験的である。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      LinuxおよびSolarisにおいて、依存しているライブラリのパスとして相対パスを使うには、<literal>deploy</literal>方式を使って、適切な-rpathフラグをリンカに渡せばよい。
<programlisting>
ghc -dynamic Main.hs -o main -lfoo -L. -optl-Wl,-rpath,'$ORIGIN'
</programlisting>
      これは、<literal>libfoo.so</literal>というライブラリがカレントディレクトリにあり、このプログラムが(訳注: 別の場所、あるいは別マシンに)配置されたときには実行ファイル<literal>main</literal>と同じディレクトリで見付かることを仮定している。同様に、実行ファイルから相対的に見てサブディレクトリを使うことも可能である。例えば、<literal>-optl-Wl,-rpath,'$ORIGIN/lib'</literal>。
    </para>
  </sect2>

</sect1>
