<?xml version="1.0" encoding="UTF-8"?>
<chapter id="installing-bin-distrib">
  <title>GHCのインストール</title>
<indexterm><primary>binary installations</primary></indexterm>
<indexterm><primary>installation, of binaries</primary></indexterm>

<para>インストールはバイナリ配布物から行うのが最も簡単で、しかも推奨される方法だ。(なぜバイナリか？ GHCはHaskellで書かれたHaskellコンパイラなので、なんらかの方法でブートストラップしないといけないからだ。この目的のために、我々はHaskellコードから機械的に生成されたCコードを提供しているが、これを使うのは実際かなりの苦痛だ。もしGHCをソースからビルドしなければならないなら、そのためにバイナリ配布のGHCを使うのが妥当な方法だ。)</para>

<para>この手引きは複数の部分から成っている。</para>

  <itemizedlist>
    <listitem>
      <para>Unix的なものへのインストール(<xref
      linkend="unix-a-likes"/>)。</para>
    </listitem>
    <listitem>
      <para>Windowsへのインストール(<xref
      linkend="install-windows"/>)。</para>
    </listitem>
    <listitem>
      <para>インストールされるファイルの配置(<xref
      linkend="install-files"/>)。GHCをインストールするのにこれを知っている必要はないが、実装を変えようというときには役に立つ。</para>
    </listitem>
  </itemizedlist>
  
  <sect1 id="unix-a-likes"><title>Unix的なものへのインストール</title>

    <sect2>
      <title>プラットフォーム固有のパッケージが利用可能なとき</title>
      
      <para>有名なOSの多くは、そのプラットフォーム固有の方法でパッケージ化されたGHCバイナリを提供している。もしこれが利用できるなら、それを使うのがおそらくGHCをインストールする最良の方法だろう。なぜなら、依存関係が自動的に処理される上に、ふつう、パッケージシステムを使って後日パッケージをアンインストールすることができるからである。
      </para>
      <para><ulink url="http://www.haskell.org/ghc/distribution_packages.html">distribution packages</ulink>のページを見て、あなたのプラットフォームで利用できるパッケージがあるかどうか確かめてほしい。</para>
    </sect2>

<sect2>
<title>GHCのバイナリ配布物</title>

<para>
<indexterm><primary>bundles of binary stuff</primary></indexterm>
</para>

<para>
バイナリ配布物は、「束(bundle)」の単位で提供され、<literal>ghc-<replaceable>version</replaceable>-<replaceable>platform</replaceable>.tar.bz2</literal>と呼ばれる。(<replaceable>platform</replaceable>の定義については<ulink url="http://hackage.haskell.org/trac/ghc/wiki/Building">building guide</ulink>を見よ)。次のようにバイナリ配布物の束を展開したとしよう。</para>

<para>
<screen>
% cd /your/scratch/space
% bunzip2 &#60; ghc-<replaceable>version</replaceable>-<replaceable>platform</replaceable>.tar.bz2 | tar xvf -</screen>
</para>

<para>すると、<literal>ghc-<replaceable>version</replaceable></literal>という単一のディレクトリの中に束の内容があるはずである。</para>

<sect3 id="install">
<title>インストール</title>

<para>
よろしい、では選んだ束を展開したとしよう。次はなんだ？よろしい、まず束を<literal>設定</literal><indexterm><primary>configure</primary></indexterm>(configure)する必要がある。これには、束のトップレベルディレクトリに移動し、<literal>./configure</literal>と打てば良い。これで<literal>Makefile-vars.in</literal>が<literal>Makefile-vars</literal>に変換される。
</para>

<para>
<literal>configure</literal>スクリプトはいくつかのフラグを取る。最も広く使われるのは<literal>--prefix=<replaceable>/path/to/install/in</replaceable></literal>フラグで、デフォルトの場所(/usr/local)でなく<replaceable>/path/to/install/in</replaceable>にインストールされるように指示するものである。configureが受け付ける全てのフラグを見るには、<literal>configure --help</literal>を実行せよ。</para>

<para>
その後、次のことを行う必要がある。
</para>

<para>

<orderedlist>
<listitem>

<para>
<literal>make install</literal>を実行する。これは通常のUnixの<literal>make</literal>で動作する<emphasis>はず</emphasis>である。GNU <literal>make</literal>のような豪華なものは必要としない。
</para>
</listitem>

<listitem>
<para>
必要なら、指示される通りに、binディレクトリをPATHに加える。
</para>
</listitem>

<listitem>
<para>
t?cshまたはzshの利用者は、シェルが新しくbinディレクトリに入ったものを見ることができるように、<literal>rehash</literal>を実行する。
</para>
</listitem>

<listitem>
<para>
終わったら、インストールの結果を、<xref linkend="GHC-test"/>にある方法でテストする。<literal>-v</literal>オプションを使って、どのパスが使われているか確認すること。もし期待どおりに動いていないなら、<ulink url="http://hackage.haskell.org/trac/ghc/wiki/Building">building guide</ulink>にある既知の落し穴の一覧を調べると良い。
</para>
</listitem>

</orderedlist>

</para>

<para>
<indexterm><primary>link, installed as ghc</primary></indexterm>ユーザから起動可能なバイナリをインストールするとき、GHCは<literal>ghc-x.xx</literal>(ただし<literal>x.xx</literal>はGHCのバージョン番号)としてインストールされる。さらに、<literal>ghc</literal>から<literal>ghc-x.xx</literal>へのリンクが(バイナリのインストールディレクトリに)作られる。複数の版のGHCをインストールした場合、最後にインストールしたものが「勝」って、&ldquo;<literal>ghc</literal>&rdquo;はそれを起動するようになる。必要なら手作業でこれを変えることができる。しかしいずれの場合でも、<literal>ghc-x.xx</literal>は常にGHCバージョン<literal>x.xx</literal>を起動するはずである。
</para>

</sect3>

<sect3 id="GHC-test">
<title>GHCが正しく動いていそうか調べる
</title>

<para>
<indexterm><primary>testing a new GHC</primary></indexterm>
</para>

<para>
これをするには、もちろん、<emphasis>この</emphasis>プログラム(<literal>Main.hs</literal>ファイルに置いて)をコンパイルして実行すれば良い。
</para>

<para>

<programlisting>
main = putStr "Hello, world!\n"
</programlisting>

</para>

<para>
プログラムをコンパイルする。ライブラリその他が正しく見付かっているかを確かめるために<literal>-v</literal>(多弁)フラグを使う。

<screen>
% ghc -v -o hello Main.hs</screen>

</para>

<para>
では実行する。

<screen>
% ./hello
Hello, world!</screen>

</para>

<para>どうやってGHCを「運転する」かについてのさらなる情報のためには、読み進めよ。</para>

</sect3>

</sect2>

</sect1>


<sect1 id="install-windows"><title>Windowsへのインストール</title>

<para>
グラスゴーHaskellコンパイラ(5.02より後)をWindowsプラットフォーム上で動かすのは容易い。インストーラが必要なことを全て行ってくれる。
</para>

<sect2><title>GHCをWindowsにインストールする</title>

<para>
GHCをインストールするには、次の手順を踏めば良い。
</para>
<itemizedlist>
<listitem><para>
<ulink url="http://www.haskell.org/ghc/download.html">GHCのダウンロードページ</ulink>から、インストーラをダウンロードする。
</para></listitem>

<listitem><para>インストーラを実行する。Windowsでは、GHCの全てのファイルは単一のディレクトリにインストールされる。変更できるが、デフォルトではそのディレクトリは<filename>c:/ghc/ghc-<replaceable>version</replaceable></filename>である。GHCの実行バイナリは、インストールディレクトリ下の<filename>bin/</filename>サブディレクトリにインストールされる。GHCをコマンド行から起動したいなら、これを<literal>$PATH</literal>環境変数に加えること。</para>

<para>
インストールが完了したら、GHCi、及びGHCのドキュメントが、スタートメニューの「Start/All Programs/GHC/ghc-<replaceable>version</replaceable>」から利用可能になるはずである。
</para>
</listitem>

<listitem><para>
GHCは、一時ファイルを作るディレクトリを必要とする。適切なディレクトリを見付けるために、標準のWindows手続き<literal>GetTempPath()</literal>を使う。この手続きは次のものを返す。
<itemizedlist>
<listitem><para>環境変数TMPが設定されているなら、そのパス。</para></listitem>
<listitem><para>そうでないとき、環境変数TEMPが設定されているなら、そのパス。</para></listitem>
<listitem><para>そうでないとき、ユーザごとのデフォルトが使われる。これはWindowsの版によって異なる。NTやXPのような版では、<filename>c:\Documents and Settings\&lt;username&gt;\Local Settings\Temp</filename>だろう。
</para></listitem>
</itemizedlist>
重要なことは、特になにもしなければ、GHCはちゃんと動くということだ。しかし、ディレクトリを指定したいなら、TMPあるいはTEMPを設定することで実現できる。
</para></listitem>

<listitem>
<para>
あなたの労働の成果を確かめるために、単純なHaskellプログラムのコンパイルを試してみよう。
</para>

<screen>
bash$ cat main.hs
module Main(main) where

main = putStrLn "Hello, world!"
bash$ ghc -o main main.hs
..
bash$ ./main
Hello, world!
bash$</screen>
</listitem>
</itemizedlist>

<para>
GHCをインストールするのに、Cygwinツールチェインやその他のものは必要ない。
</para>
<para>
GHCをインストールするのには約365Mのディスク空き容量が必要である。GHCを快適に使うには、マシンには最低でも64Mのメモリがあるべきだ。
</para>
</sect2>

<sect2><title>GHCを移動する</title>
<para>
一旦インストールした後は、<filename>c:/ghc/ghc-<replaceable>version</replaceable></filename>ディレクトリをコピーすることで自由にGHCツリー全体を移動させることができる。(もしこれをしたなら、「Start/All Programs/GHC/ghc-<replaceable>version</replaceable>」以下のリンクを修正する必要があるだろう)
</para>
<para>
GHCツリーを空白を含むパスに置いても問題ない。しかし、CygwinツールとともにGHCを使いたいなら、Cygwinが混乱するおそれがあるので、これはしないほうが良い。この問題はまだ完全には解明されていないが、少なくともGHC自体の問題でないことは分かっている。それでも、面倒を避けるために、我々はふつうパスが空白を含まないところにGHCを置く。
</para>
</sect2>

<sect2 id="winfaq">
<title>ghc-win32インストールFAQ</title>

      <variablelist>
	<varlistentry>
          <term>シンボリックリンクがうまく働かない。</term>
	  <listitem>
            <para>シンボリックリンクはCygwin(<xref linkend="install" />)の下でしか働かない。そのため、Cygwin DLLにリンクされていないプログラム(特に、Mingwin用にビルドされたもの)はシンボリックリンクを扱えない。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
          <term><command>rm</command>や<command>mv</command>が
          「permission denied」というメッセージを表示する。</term>
	  <listitem>
            <para>これには色々な原因が考えられる。explorerウィンドウでディレクトリを開いているときにそのディレクトリの名前を変えようとすると、失敗しやすい。普通はウィンドウを閉じれば問題は治まるが、原因がもっとわかりにくいこともある。そういうときは、一旦ログオフしたり、再起動したりするのが最も素早い解決策かもしれない。</para>
	  </listitem>
	</varlistentry>
      </variablelist>

</sect2>

</sect1>


<sect1 id="install-files"><title>インストールされたファイルの配置</title>

<para>
この節では、どのファイルがどこにインストールされるかを説明する。GHCをインストールするだけなら
これを知っている必要はないが、実装を変えようというときは必須の情報である。
</para>
<para>GHCは二つのディレクトリツリーにインストールされる。</para>
<variablelist>
<varlistentry>
<term>ライブラリディレクトリ</term><listitem> <para><filename>$(libdir)</filename>とも呼ばれる。GHCを実行するために必要な全ての補助ファイルはここに置かれる。Unixでは、このディレクトリはふつう<filename>/usr/lib/ghc/ghc-5.02</filename>のようなところである。</para>
</listitem>
</varlistentry>
<varlistentry>
<term>バイナリディレクトリ</term>
<listitem> <para><filename>$(bindir)</filename>とも呼ばれる。利用者が起動する実行ファイルはここに置かれる。特に、<filename>ghc</filename>と<filename>ghci</filename>が置かれるのもここである。Unixでは、このディレクトリはどこでも良いが、典型的には<filename>/usr/local/bin</filename>のようなところである。一方、Windowsでは、このディレクトリは<filename>$(libdir)/bin</filename>で<emphasis>なければならない</emphasis>。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
GHCは、実行されるとき、ライブラリディレクトリの場所を知っていなければならない。これは、次の二つの方法のいずれかで見つけ出される。
</para>
<itemizedlist>
<listitem>
<para>
<filename>$(libdir)</filename>が<option>-B</option>フラグでGHCに渡される。Unixでは、インストールされる<filename>ghc</filename>は単なる一行のシェルスクリプトで(Windowsではそうではない)、適切な<option>-B</option>フラグを渡してGHC本体を起動する。[利用者によって渡されたフラグは全てこの後に続けられ、より後の<option>-B</option>フラグが前のフラグを上書きするので、利用者によって渡されたフラグが優先される。]
</para>
</listitem>
<listitem>
<para>Windowsでは、<option>-B</option>フラグが渡されなかった場合、GHCはシステムコールを使って実行中のGHC実行ファイルが置かれているディレクトリを見つけ出し、それを基にして<filename>$(libdir)</filename>を得る(Unixではこの機能はない)。[Unixにはこのためのシステムコールがない]これが<filename>$(bindir)</filename>が<filename>$(libdir)/bin</filename>でなければならない理由である。
</para>
</listitem>
</itemizedlist>

<sect2> <title>バイナリディレクトリ</title>

<para>バイナリディレクトリ、すなわち<filename>$(bindir)</filename>には、ユーザから見える実行ファイル、特に<filename>ghc</filename>と<filename>ghci</filename>が置かれる。このディレクトリは<literal>$PATH</literal>に加えられるべきである。</para>

<para>Unixでは、ユーザから実行できる<filename>ghc</filename>は、<filename>$(libdir)/ghc-<replaceable>version</replaceable></filename>を起動する。このとき、<filename>ghc-<replaceable>version</replaceable></filename>に適切な<option>-B</option>フラグを渡して、どこに<filename>$(libdir)</filename>があるかを伝える。<filename>ghci</filename>も同様であるが、<literal>--interactive</literal>という余分なフラグを渡すところが異なる。</para>

<para>Win32では、ユーザから起動できる<filename>ghc</filename>バイナリがプログラム本体である(中間のシェルスクリプトや<filename>.bat</filename>ファイルはない)。このようになっているのは、GHCをとても長いコマンド行で起動することがあるが、<filename>cmd.exe</filename>(これが<filename>.bat</filename>ファイルを実行する)がこれを切り詰めてしまうからである。同様に、<filename>ghci</filename>は<filename>ghc --interactive</filename>を(引数を全て渡して)起動する、Cで書かれたラッパであり、<filename>.bat</filename>ファイルではない。</para>


</sect2>

<sect2> <title>ライブラリディレクトリ</title>

<para>ライブラリディレクトリ、すなわち<filename>$(libdir)</filename>内の配置はWindowsとUnixでほとんど同じで、以下のようになっている。WindowsとUnixでの相異点は<literal>[Win32のみ]</literal>のように書かれ、下で説明してある。</para>

<programlisting>
  $(libdir)/
    package.conf           GHCのパッケージ設定
    ghc-usage.txt          ghc &ndash;&ndash;helpで表示されるメッセージ
    ghci-usage.txt         ghci &ndash;&ndash;helpで表示されるメッセージ
    
    bin/                   [Win32のみ] ユーザから見えるバイナリ
        ghc.exe
        ghci.exe

    unlit                  文芸形式のマークアップを削除する
    
    touchy.exe             [Win32のみ]
    perl.exe               [Win32のみ]
    gcc.exe                [Win32のみ]
   
    ghc-x.xx               GHCの実行ファイル [Unixのみ]
   
    ghc-split              アセンブラコード分割器
    ghc-asm	           アセンブラコードmangler

    gcc-lib/               [Win32のみ] gccの補助ファイル
        specs              gccの設定
 
        cpp0.exe           gccの補助バイナリ
        as.exe
        ld.exe

        crt0.o              標準
	    ..etc..	    バイナリ
        
        libmingw32.a        標準
	    ..etc..	    ライブラリ

        *.h                 includeファイル

    hslibs-imports/         GHCのインタフェースファイル
        ghc/*.hi              「ghc」ライブラリのインタフェースファイル

    include/                 Cのヘッダファイル
        StgMacros.h           GHC固有の
        ..etc..               ヘッダファイル

        mingw/*.h            [Win32のみ] Mingwinのヘッダファイル

    lib/                    GHC'のライブラリ
        base-2.1
        ..etc..

    libHSrts*.a             GHC RTSのアーカイブ
    libHSghc.a              GHCパッケージのアーカイブ

    HSrts.o                 GHC RTSのリンク可能ファイル、ghciが使う
    HSghc.o                 GHCパッケージのリンク可能ファイル、ghciが使う
</programlisting>

<para>次のことに注意。
<itemizedlist>

	<listitem>
          <para><filename>$(libdir)</filename>にも補助バイナリが置かれる。これらはユーザの<filename>PATH</filename>に置かれることを意図したものではなく、GHCによって直接起動されるものである。Makefileのシステムによっては、このディレクトリは<filename>$(libexecdir)</filename>とも呼ばれるが、<emphasis>これを自由に変更することはできない</emphasis>。これは<filename>$(libdir)</filename>と同じでなければならない。</para>
	</listitem>

<listitem>
<para>GHCのWin32配布物には<filename>gcc</filename>が付属するが、これは利用者が<filename>gcc</filename>をインストールしたり、バージョンについて気を配ったりしなくて済むようにである。<filename>gcc</filename>の補助ファイルは全て<filename>$(libdir)/gcc-lib/</filename>に置かれる。
</para>
</listitem>

<listitem>
<para>同様に、<filename>perl</filename>、それから<filename>touch</filename>の代替品(<filename>touchy.exe</filename>)も、GHCのWin32配布物に付属する。</para>
</listitem>

	<listitem>
          <para><filename>ghc-split</filename>および<filename>ghc-asm</filename>という補助プログラムはPerlスクリプトであり、一行目は<literal>#!/usr/bin/perl</literal>である。Unixでは、このスクリプトはシェルスクリプトとして実行され、それがPerlを起動する。Windowsでは、GHCが直接<filename>$(libdir)/perl.exe</filename>を起動し、<literal>#!/usr/bin/perl</literal>はコメントとみなされる。このようになっているのは、Windowsでは、Perlがインストールされていることを前提にするのではなく、GHC付属のPerlを起動したいからである。</para>
	</listitem>
</itemizedlist>
</para>

</sect2>

</sect1>

</chapter>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; mode: xml ***
     ;;; sgml-parent-document: ("users_guide.xml" "book" "chapter") ***
     ;;; End: ***
 -->
