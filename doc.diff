diff -dur 7.0.4-original//phases.xml original/phases.xml
--- 7.0.4-original//phases.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/phases.xml	2011-08-08 01:10:05.000000000 +0800
@@ -5,7 +5,7 @@
   <sect2 id="replacing-phases">
     <title>Replacing the program for one or more phases</title>
     <indexterm><primary>phases, changing</primary></indexterm>
-    
+
     <para>You may specify that a different program be used for one
     of the phases of the compilation system, in place of whatever
     the <command>ghc</command> has wired into it.  For example, you
@@ -71,17 +71,6 @@
 
       <varlistentry>
         <term>
-          <option>-pgmm</option> <replaceable>cmd</replaceable>
-          <indexterm><primary><option>-pgmm</option></primary></indexterm>
-        </term>
-        <listitem>
-          <para>Use <replaceable>cmd</replaceable> as the
-          mangler.</para>
-        </listitem>
-      </varlistentry>
-
-      <varlistentry>
-        <term>
           <option>-pgms</option> <replaceable>cmd</replaceable>
           <indexterm><primary><option>-pgms</option></primary></indexterm>
         </term>
@@ -420,7 +409,7 @@
           for Windows, <literal>solaris</literal>, etc.).</para>
         </listitem>
       </varlistentry>
-        
+
       <varlistentry>
         <term>
           <constant><replaceable>arch</replaceable>_HOST_ARCH=1</constant>
@@ -448,7 +437,7 @@
 <programlisting>strmod = "\
 \ p \
 \ "</programlisting>
-      
+
       <para>don't work with <option>-cpp</option>;
       <filename>/usr/bin/cpp</filename> elides the backslash-newline
       pairs.</para>
@@ -463,7 +452,7 @@
 
   <sect2 id="pre-processor">
     <title>Options affecting a Haskell pre-processor</title>
-    
+
     <indexterm><primary>pre-processing: custom</primary></indexterm>
     <indexterm><primary>Pre-processor options</primary></indexterm>
 
@@ -543,21 +532,8 @@
         </term>
         <listitem>
           <para>Use GHC's native code generator rather than
-          compiling via C.  This will compile faster (up to twice as
-          fast), but may produce code that is slightly slower than
-          compiling via C.  <option>-fasm</option> is the default.</para>
-        </listitem>
-      </varlistentry>
-
-      <varlistentry>
-        <term>
-          <option>-fvia-C</option>
-          <indexterm><primary><option>-fvia-C</option></primary></indexterm>
-        </term>
-        <listitem>
-          <para>Compile via C instead of using the native code
-          generator.  This is the default on architectures for which GHC
-          doesn't have a native code generator.</para>
+          compiling via LLVM.
+          <option>-fasm</option> is the default.</para>
         </listitem>
       </varlistentry>
 
@@ -569,8 +545,8 @@
         <listitem>
           <para>Compile via LLVM instead of using the native code
           generator. This will generally take slightly longer than the
-          native code generator to compile but quicker than compiling
-          via C. Produced code is generally the same speed or faster
+          native code generator to compile.
+          Produced code is generally the same speed or faster
           than the other two code generators. Compiling via LLVM
           requires LLVM version 2.7 or later to be on the path.</para>
         </listitem>
@@ -879,11 +855,11 @@
             However, if all the modules are otherwise up to date, you may need to force
             recompilation both of the module where the new "main" is, and of the
             module where the "main" function used to be;
-            <literal>ghc</literal> is not clever 
+            <literal>ghc</literal> is not clever
             enough to figure out that they both need recompiling.  You can
             force recompilation by removing the object file, or by using the
             <option>-fforce-recomp</option> flag.
-            </para> 
+            </para>
         </listitem>
       </varlistentry>
 
@@ -952,7 +928,7 @@
           <para>The threaded runtime system provides the following
           benefits:</para>
 
-          <itemizedlist> 
+          <itemizedlist>
             <listitem>
               <para>Parallelism<indexterm><primary>parallelism</primary></indexterm> on a multiprocessor<indexterm><primary>multiprocessor</primary></indexterm><indexterm><primary>SMP</primary></indexterm> or multicore<indexterm><primary>multicore</primary></indexterm>
               machine.  See <xref linkend="using-smp" />.</para>
@@ -1062,7 +1038,7 @@
             <option>-with-rtsopts="-H128m"</option> sets the default heap size to 128MB.
             This will always be the default heap size for this program, unless the user overrides it.
             (Depending on the setting of the <option>-rtsopts</option> option, the user might
-            not have the ability to change RTS options at run-time, in which case 
+            not have the ability to change RTS options at run-time, in which case
             <option>-with-rtsopts</option> would be the <emphasis>only</emphasis> way to set
             them.)
           </para>
@@ -1078,7 +1054,7 @@
         <listitem>
           <para>On Windows, GHC normally generates a
             <firstterm>manifest</firstterm><indexterm><primary>manifest</primary>
-            </indexterm>file when linking a binary.  The
+            </indexterm> file when linking a binary.  The
             manifest is placed in the file
             <literal><replaceable>prog</replaceable>.exe.manifest</literal>
             where <replaceable>prog.exe</replaceable> is the name of the
@@ -1098,7 +1074,7 @@
             system using the security control panel, but GHC by default
             generates binaries that don't depend on the user having disabled
             installer detection.</para>
-          
+
           <para>The <option>-fno-gen-manifest</option> disables generation of
             the manifest file.  One reason to do this would be if you had
             a manifest file of your own, for example.</para>
@@ -1110,7 +1086,7 @@
             <option>-fno-embed-manifest</option>, see below.</para>
         </listitem>
       </varlistentry>
-          
+
       <varlistentry>
         <term>
           <option>-fno-embed-manifest</option>
@@ -1126,15 +1102,15 @@
             </indexterm>; to see exactly what GHC does to embed the manifest,
             use the <option>-v</option> flag.  A GHC installation comes with
             its own copy of <literal>windres</literal> for this reason.</para>
-          
+
           <para>See also <option>-pgmwindres</option> (<xref
-              linkend="replacing-phases" />) and 
+              linkend="replacing-phases" />) and
             <option>-optwindres</option> (<xref
                                             linkend="forcing-options-through"
               />).</para>
         </listitem>
       </varlistentry>
-          
+
       <varlistentry>
         <term>
           <option>-fno-shared-implib</option>
@@ -1149,7 +1125,7 @@
             disk-space cost of creating this import library, which can be substantial - it
             might require as much space as the code itself, as Haskell DLLs tend to export
             lots of symbols.</para>
-            
+
           <para>As long as you are happy to only be able to link to the DLL using
             <literal>GetProcAddress</literal> and friends, you can supply the
             <option>-fno-shared-implib</option> flag to disable the creation of the import
diff -dur 7.0.4-original//profiling.xml original/profiling.xml
--- 7.0.4-original//profiling.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/profiling.xml	2011-08-08 01:10:05.000000000 +0800
@@ -8,7 +8,7 @@
   <para> Glasgow Haskell comes with a time and space profiling
   system. Its purpose is to help you improve your understanding of
   your program's execution behaviour, so you can improve it.</para>
-  
+
   <para> Any comments, suggestions and/or improvements you have are
   welcome.  Recommended &ldquo;profiling tricks&rdquo; would be
   especially cool! </para>
@@ -39,18 +39,18 @@
       <indexterm><primary><option>-p</option></primary><secondary>RTS
       option</secondary></indexterm>
     </listitem>
-      
+
     <listitem>
       <para> Examine the generated profiling information, using one of
       GHC's profiling tools.  The tool to use will depend on the kind
       of profiling information generated.</para>
     </listitem>
-    
+
   </orderedlist>
-  
+
   <sect1 id="cost-centres">
     <title>Cost centres and cost-centre stacks</title>
-    
+
     <para>GHC's profiling system assigns <firstterm>costs</firstterm>
     to <firstterm>cost centres</firstterm>.  A cost is simply the time
     or space required to evaluate an expression.  Cost centres are
@@ -385,7 +385,7 @@
 	</listitem>
       </varlistentry>
     </variablelist>
-      
+
     <para>There are a few other profiling-related compilation options.
     Use them <emphasis>in addition to</emphasis>
     <option>-prof</option>.  These do not have to be used consistently
@@ -406,7 +406,7 @@
           it manually.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term>
           <option>-auto-all</option>:
@@ -509,7 +509,7 @@
       </varlistentry>
 
     </variablelist>
-    
+
   </sect1>
 
   <sect1 id="prof-heap">
@@ -541,7 +541,7 @@
 	file,
 	<filename><replaceable>prog</replaceable>.ps</filename>.  The
 	<command>hp2ps</command> utility is described in detail in
-	<xref linkend="hp2ps"/>.</para> 
+	<xref linkend="hp2ps"/>.</para>
       </listitem>
       <listitem>
 	<para>Display the heap profile using a postscript viewer such
@@ -612,7 +612,7 @@
 	    represent an approximation to the actual type.</para>
 	  </listitem>
 	</varlistentry>
-	
+
 	<varlistentry>
 	  <term>
             <option>-hr</option>
@@ -644,7 +644,7 @@
       to display a profile by type but only for data produced by a
       certain module, or a profile by retainer for a certain type of
       data.  Restrictions are specified as follows:</para>
-      
+
       <variablelist>
 	<varlistentry>
 	  <term>
@@ -702,7 +702,7 @@
 	    types.</para>
 	  </listitem>
 	</varlistentry>
-	
+
 	<varlistentry>
 	  <term>
             <option>-hr</option><replaceable>cc</replaceable>,...
@@ -776,7 +776,7 @@
 	    state in addition to the space allocated for its stack
 	    (stacks normally start small and then grow as
 	    necessary).</para>
-	    
+
 	    <para>This includes the main thread, so using
 	    <option>-xt</option> is a good way to see how much stack
 	    space the program is using.</para>
@@ -802,7 +802,7 @@
       </variablelist>
 
     </sect2>
-    
+
     <sect2 id="retainer-prof">
       <title>Retainer Profiling</title>
 
@@ -843,7 +843,7 @@
       set <literal>MANY</literal>.  The maximum set size defaults to 8
       and can be altered with the <option>-R</option> RTS
       option:</para>
-      
+
       <variablelist>
 	<varlistentry>
 	  <term><option>-R</option><replaceable>size</replaceable></term>
@@ -883,7 +883,7 @@
 <screen>
 <replaceable>prog</replaceable> +RTS -hr -hcB
 </screen>
-	
+
 	<para>This trick isn't foolproof, because there might be other
         B closures in the heap which aren't the retainers we are
         interested in, but we've found this to be a useful technique
@@ -1004,9 +1004,9 @@
     <indexterm><primary>heap profiles</primary></indexterm>
     <indexterm><primary>postscript, from heap profiles</primary></indexterm>
     <indexterm><primary><option>-h&lt;break-down&gt;</option></primary></indexterm>
-    
+
     <para>Usage:</para>
-    
+
 <screen>
 hp2ps [flags] [&lt;file&gt;[.hp]]
 </screen>
@@ -1030,7 +1030,7 @@
     <para>The flags are:</para>
 
     <variablelist>
-      
+
       <varlistentry>
 	<term><option>-d</option></term>
 	<listitem>
@@ -1136,7 +1136,7 @@
 	  <para>Use a small box for the title.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term><option>-t&lt;float&gt;</option></term>
 	<listitem>
@@ -1157,14 +1157,14 @@
 	  <para>Generate colour output.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term><option>-y</option></term>
 	<listitem>
 	  <para>Ignore marks.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term><option>-?</option></term>
 	<listitem>
@@ -1177,7 +1177,7 @@
     <sect2 id="manipulating-hp">
       <title>Manipulating the hp file</title>
 
-<para>(Notes kindly offered by Jan-Willhem Maessen.)</para>
+<para>(Notes kindly offered by Jan-Willem Maessen.)</para>
 
 <para>
 The <filename>FOO.hp</filename> file produced when you ask for the
@@ -1256,7 +1256,7 @@
 heap profile as described in the previous section.  Run <command>gv</command> on your
 profile:
 <screen>
-  gv -watch -seascape FOO.ps 
+  gv -watch -seascape FOO.ps
 </screen>
 If you forget the <literal>-watch</literal> flag you can still select
 "Watch file" from the "State" menu.  Now each time you generate a new
@@ -1292,7 +1292,7 @@
     head -`fgrep -n END_SAMPLE FOO.hp | tail -1 | cut -d : -f 1` FOO.hp \
       | hp2ps > FOO.ps
     kill -HUP $gvpsnum
-  done    
+  done
 </screen>
 </para>
 </sect2>
@@ -1335,7 +1335,7 @@
       a yellow background indicates a part of the program that was
       never evaluated; a green background indicates an always-True
       expression and a red background indicates an always-False one.
-    </para> 
+    </para>
 
    <sect2><title>A small example: Reciprocation</title>
 
@@ -1381,10 +1381,10 @@
     </para>
 
 <screen>
-$ ghc -fhpc Recip.hs --make 
+$ ghc -fhpc Recip.hs --make
 </screen>
-    <para>HPC index (.mix) files are placed placed in .hpc subdirectory. These can be considered like
-    the .hi files for HPC. 
+    <para>HPC index (.mix) files are placed in .hpc subdirectory. These can be considered like
+    the .hi files for HPC.
    </para>
 <screen>
 $ ./Recip
@@ -1396,8 +1396,8 @@
 $ hpc report Recip
  80% expressions used (81/101)
  12% boolean coverage (1/8)
-      14% guards (1/7), 3 always True, 
-                        1 always False, 
+      14% guards (1/7), 3 always True,
+                        1 always False,
                         2 unevaluated
        0% 'if' conditions (0/1), 1 always False
      100% qualifiers (0/0)
@@ -1415,11 +1415,11 @@
 		hpc_index.html, hpc_index_alt.html, hpc_index_exp.html,
 		hpc_index_fun.html.
 	</para>
-     </sect2> 
+     </sect2>
 
      <sect2><title>Options for instrumenting code for coverage</title>
 	<para>
-		Turning on code coverage is easy, use the -fhpc flag. 
+		Turning on code coverage is easy, use the -fhpc flag.
 		Instrumented and non-instrumented can be freely mixed.
 		When compiling the Main module GHC automatically detects when there
 		is an hpc compiled file, and adds the correct initialization code.
@@ -1431,9 +1431,9 @@
 
       <para>
       The hpc toolkit uses a cvs/svn/darcs-like interface, where a
-      single binary contains many function units.</para> 
+      single binary contains many function units.</para>
 <screen>
-$ hpc 
+$ hpc
 Usage: hpc COMMAND ...
 
 Commands:
@@ -1456,9 +1456,9 @@
      <para>In general, these options act on .tix file after an
      instrumented binary has generated it, which hpc acting as a
      conduit between the raw .tix file, and the more detailed reports
-     produced. 
+     produced.
 	</para>
-	  
+
 	<para>
 		The hpc tool assumes you are in the top-level directory of
 		the location where you built your application, and the .tix
@@ -1467,7 +1467,7 @@
 		--srcdir multiple times to analyse programs compiled from
 		difference locations, as is typical for packages.
 	</para>
-	  
+
 	<para>
 	We now explain in more details the major modes of hpc.
      </para>
@@ -1477,8 +1477,8 @@
 			all modules and packages are considered in generating report,
 			unless include or exclude are used. The report is a summary
 			unless the --per-module flag is used. The --xml-output option
-			allows for tools to use hpc to glean coverage. 
-		</para>	
+			allows for tools to use hpc to glean coverage.
+		</para>
 <screen>
 $ hpc help report
 Usage: hpc report [OPTION] .. &lt;TIX_FILE&gt; [&lt;MODULE&gt; [&lt;MODULE&gt; ..]]
@@ -1518,8 +1518,8 @@
 
        </sect3>
        <sect3><title>hpc sum</title>
-		<para>hpc sum adds together any number of .tix files into a single 
-		.tix file. hpc sum does not change the original .tix file; it generates a new .tix file. 
+		<para>hpc sum adds together any number of .tix files into a single
+		.tix file. hpc sum does not change the original .tix file; it generates a new .tix file.
 		</para>
 <screen>
 $ hpc help sum
@@ -1535,10 +1535,10 @@
 </screen>
        </sect3>
        <sect3><title>hpc combine</title>
-		<para>hpc combine is the swiss army knife of hpc. It can be 
+		<para>hpc combine is the swiss army knife of hpc. It can be
 		 used to take the difference between .tix files, to subtract one
 		.tix file from another, or to add two .tix files. hpc combine does not
-		change the original .tix file; it generates a new .tix file. 
+		change the original .tix file; it generates a new .tix file.
 		</para>
 <screen>
 $ hpc help combine
@@ -1557,11 +1557,11 @@
        </sect3>
        <sect3><title>hpc map</title>
 		<para>hpc map inverts or zeros a .tix file. hpc map does not
-		change the original .tix file; it generates a new .tix file. 
+		change the original .tix file; it generates a new .tix file.
 		</para>
 <screen>
 $ hpc help map
-Usage: hpc map [OPTION] .. &lt;TIX_FILE&gt; 
+Usage: hpc map [OPTION] .. &lt;TIX_FILE&gt;
 Map a function over a single .tix file
 
 Options:
@@ -1591,7 +1591,7 @@
     --hpcdir=DIR   sub-directory that contains .mix files
                    default .hpc [rarely used]
     --output=FILE  output FILE
-% hpc help draft  
+% hpc help draft
 Usage: hpc draft [OPTION] .. &lt;TIX_FILE&gt;
 
 Options:
@@ -1660,7 +1660,7 @@
             for <option>-debug</option> at link-time).  This links in
             the debug version of the RTS, which includes the code for
             aggregating and reporting the results of ticky-ticky
-            profilng.
+            profiling.
           </para>
         </listitem>
         <listitem>
@@ -1678,7 +1678,7 @@
       the invocation
       <command>foo +RTS -rfoo.ticky</command>.
       </para>
-    
+
 <screen>
  foo +RTS -rfoo.ticky
 
diff -dur 7.0.4-original//runtime_control.xml original/runtime_control.xml
--- 7.0.4-original//runtime_control.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/runtime_control.xml	2011-08-08 01:10:05.000000000 +0800
@@ -329,7 +329,7 @@
            with a message like &ldquo;<literal>failed to mmap() memory below 2Gb</literal>&rdquo;.  If you need to use this option to get GHCi working
            on your machine, please file a bug.
          </para>
-         
+
          <para>
            On 64-bit machines, the RTS needs to allocate memory in the
            low 2Gb of the address space.  Support for this across
@@ -495,7 +495,7 @@
             generation <replaceable>gen</replaceable> and higher.
             Omitting <replaceable>gen</replaceable> turns off the
             parallel GC completely, reverting to sequential GC.</para>
-          
+
           <para>The default parallel GC settings are usually suitable
             for parallel programs (i.e. those
             using <literal>par</literal>, Strategies, or with multiple
@@ -509,7 +509,7 @@
             restrict parallel GC to the old generation
             with <literal>-qg1</literal>.</para>
         </listitem>
-      </varlistentry>        
+      </varlistentry>
 
       <varlistentry>
         <term>
@@ -524,7 +524,7 @@
             generation <replaceable>gen</replaceable> and higher.
             Omitting <replaceable>gen</replaceable> disables
             load-balancing entirely.</para>
-          
+
           <para>
             Load-balancing shares out the work of GC between the
             available cores.  This is a good idea when the heap is
@@ -600,22 +600,88 @@
 
       <varlistentry>
 	<term>
-         <option>-k</option><replaceable>size</replaceable>
+         <option>-ki</option><replaceable>size</replaceable>
          <indexterm><primary><option>-k</option></primary><secondary>RTS option</secondary></indexterm>
-         <indexterm><primary>stack, minimum size</primary></indexterm>
+         <indexterm><primary>stack, initial size</primary></indexterm>
         </term>
 	<listitem>
-	  <para>&lsqb;Default: 1k&rsqb; Set the initial stack size for
-          new threads.  Thread stacks (including the main thread's
-          stack) live on the heap, and grow as required.  The default
-          value is good for concurrent applications with lots of small
-          threads; if your program doesn't fit this model then
-          increasing this option may help performance.</para>
+          <para>
+            &lsqb;Default: 1k&rsqb; Set the initial stack size for new
+            threads.  (Note: this flag used to be
+            simply <option>-k</option>, but was renamed
+            to <option>-ki</option> in GHC 7.2.1.  The old name is
+            still accepted for backwards compatibility, but that may
+            be removed in a future version).
+          </para>
 
-	  <para>The main thread is normally started with a slightly
-          larger heap to cut down on unnecessary stack growth while
-          the program is starting up.</para>
-	</listitem>
+          <para>
+            Thread stacks (including the main thread's stack) live on
+            the heap.  As the stack grows, new stack chunks are added
+            as required; if the stack shrinks again, these extra stack
+            chunks are reclaimed by the garbage collector.  The
+            default initial stack size is deliberately small, in order
+            to keep the time and space overhead for thread creation to
+            a minimum, and to make it practical to spawn threads for
+            even tiny pieces of work.
+          </para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <option>-kc</option><replaceable>size</replaceable>
+          <indexterm><primary><option>-kc</option></primary><secondary>RTS
+          option</secondary></indexterm>
+          <indexterm><primary>stack</primary><secondary>chunk size</secondary></indexterm>
+        </term>
+        <listitem>
+          <para>
+            &lsqb;Default: 32k&rsqb; Set the size of &ldquo;stack
+            chunks&rdquo;.  When a thread's current stack overflows, a
+            new stack chunk is created and added to the thread's
+            stack, until the limit set by <option>-K</option> is
+            reached.
+          </para>
+
+          <para>
+            The advantage of smaller stack chunks is that the garbage
+            collector can avoid traversing stack chunks if they are
+            known to be unmodified since the last collection, so
+            reducing the chunk size means that the garbage collector
+            can identify more stack as unmodified, and the GC overhead
+            might be reduced.  On the other hand, making stack chunks
+            too small adds some overhead as there will be more
+            overflow/underflow between chunks.  The default setting of
+            32k appears to be a reasonable compromise in most cases.
+          </para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <option>-kb</option><replaceable>size</replaceable>
+          <indexterm><primary><option>-kc</option></primary><secondary>RTS
+          option</secondary></indexterm>
+          <indexterm><primary>stack</primary><secondary>chunk buffer size</secondary></indexterm>
+        </term>
+        <listitem>
+          <para>
+            &lsqb;Default: 1k&rsqb; Sets the stack chunk buffer size.
+            When a stack chunk overflows and a new stack chunk is
+            created, some of the data from the previous stack chunk is
+            moved into the new chunk, to avoid an immediate underflow
+            and repeated overflow/underflow at the boundary.  The
+            amount of stack moved is set by the <option>-kb</option>
+            option.
+          </para>
+          <para>
+            Note that to avoid wasting space, this value should
+            typically be less than 10&percnt; of the size of a stack
+            chunk (<option>-kc</option>), because in a chain of stack
+            chunks, each chunk will have a gap of unused space of this
+            size.
+          </para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
@@ -627,9 +693,14 @@
 	<listitem>
 	  <para>&lsqb;Default: 8M&rsqb; Set the maximum stack size for
           an individual thread to <replaceable>size</replaceable>
-          bytes.  This option is there purely to stop the program
-          eating up all the available memory in the machine if it gets
-          into an infinite loop.</para>
+          bytes.  If the thread attempts to exceed this limit, it will
+            be send the <literal>StackOverflow</literal> exception.
+          </para>
+          <para>
+            This option is there mainly to stop the program eating up
+            all the available memory in the machine if it gets into an
+            infinite loop.
+          </para>
 	</listitem>
       </varlistentry>
 
@@ -746,7 +817,7 @@
       </listitem>
       <listitem>
         <para>
-          The peak memory the RTS has allocated from the OS. 
+          The peak memory the RTS has allocated from the OS.
         </para>
       </listitem>
       <listitem>
@@ -941,12 +1012,12 @@
       </listitem>
       <listitem>
         <para>
-          How many page faults occured this garbage collection.
+          How many page faults occurred this garbage collection.
         </para>
       </listitem>
       <listitem>
         <para>
-          How many page faults occured since the end of the last garbage
+          How many page faults occurred since the end of the last garbage
           collection.
         </para>
       </listitem>
@@ -1138,7 +1209,7 @@
         </term>
 	<listitem>
 	  <para>
-            An RTS debugging flag; only availble if the program was
+            An RTS debugging flag; only available if the program was
 	    linked with the <option>-debug</option> option.  Various
 	    values of <replaceable>x</replaceable> are provided to
 	    enable debug messages and additional runtime sanity checks
originalだけに発見: safe_haskell.xml
diff -dur 7.0.4-original//separate_compilation.xml original/separate_compilation.xml
--- 7.0.4-original//separate_compilation.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/separate_compilation.xml	2011-08-08 01:10:05.000000000 +0800
@@ -114,9 +114,9 @@
 	  has been specified, then the object filename is
 	  <replaceable>dir</replaceable>/<replaceable>mod</replaceable>.<replaceable>osuf</replaceable>,
 	  where <replaceable>mod</replaceable> is the module name with
-	  dots replaced by slashes.  GHC will silently create the necessary directory 
+	  dots replaced by slashes.  GHC will silently create the necessary directory
           structure underneath <replaceable>dir</replaceable>, if it does not
-          already exist.</para> 
+          already exist.</para>
 	</listitem>
       </itemizedlist>
 
@@ -273,7 +273,7 @@
           <para>If you use <command>ghc --make</command> and you don't
           use the <option>-o</option>, the name GHC will choose
           for the executable will be based on the name of the file
-          containing the module <literal>Main</literal>. 
+          containing the module <literal>Main</literal>.
           Note that with GHC the <literal>Main</literal> module doesn't
           have to be put in file <filename>Main.hs</filename>.
           Thus both
@@ -433,7 +433,7 @@
 	</varlistentry>
       </variablelist>
     </sect2>
-  
+
     <sect2 id="keeping-intermediates">
       <title>Keeping Intermediate Files</title>
       <indexterm><primary>intermediate files, saving</primary>
@@ -461,9 +461,7 @@
 	    <para>Keep intermediate <literal>.hc</literal> files when
 	    doing <literal>.hs</literal>-to-<literal>.o</literal>
 	    compilations via C (NOTE: <literal>.hc</literal> files
-	    aren't generated when using the native code generator, you
-	    may need to use <option>-fvia-C</option> to force them
-	    to be produced).</para>
+	    are only generated by unregisterised compilers).</para>
 	  </listitem>
 	</varlistentry>
 
@@ -498,22 +496,6 @@
 
 	<varlistentry>
 	  <term>
-            <option>-keep-raw-s-file</option>,
-            <option>-keep-raw-s-files</option>
-            <indexterm><primary><option>-keep-raw-s-file</option></primary></indexterm>
-            <indexterm><primary><option>-keep-raw-s-files</option></primary></indexterm>
-          </term>
-	  <listitem>
-	    <para>Keep intermediate <literal>.raw-s</literal> files.
-	    These are the direct output from the C compiler, before
-	    GHC does &ldquo;assembly mangling&rdquo; to produce the
-	    <literal>.s</literal> file.  Again, these are not produced
-	    when using the native code generator.</para>
-	  </listitem>
-	</varlistentry>
-
-	<varlistentry>
-	  <term>
             <option>-keep-tmp-files</option>
             <indexterm><primary><option>-keep-tmp-files</option></primary></indexterm>
             <indexterm><primary>temporary files</primary><secondary>keeping</secondary></indexterm>
@@ -711,22 +693,22 @@
       This section explains how.</para>
 
       <para>Every cycle in the module import graph must be broken by a <filename>hs-boot</filename> file.
-      Suppose that modules <filename>A.hs</filename> and <filename>B.hs</filename> are Haskell source files, 
+      Suppose that modules <filename>A.hs</filename> and <filename>B.hs</filename> are Haskell source files,
       thus:
 <programlisting>
 module A where
     import B( TB(..) )
-    
+
     newtype TA = MkTA Int
-    
+
     f :: TB -&#62; TA
     f (MkTB x) = MkTA x
 
 module B where
     import {-# SOURCE #-} A( TA(..) )
-    
+
     data TB = MkTB !Int
-    
+
     g :: TA -&#62; TB
     g (MkTA x) = MkTB x
 </programlisting>
@@ -768,12 +750,12 @@
 <programlisting>
   ghc -c A.hs-boot
 </programlisting>
-When a hs-boot file <filename>A.hs-boot</filename> 
+When a hs-boot file <filename>A.hs-boot</filename>
    is compiled, it is checked for scope and type errors.
    When its parent module <filename>A.hs</filename> is compiled, the two are compared, and
    an error is reported if the two are inconsistent.
    </para></listitem>
-   
+
 	<listitem>
 	  <para> Just as compiling <filename>A.hs</filename> produces an
 	    interface file <filename>A.hi</filename>, and an object file
@@ -811,7 +793,7 @@
    <command>ghc -M</command> will report an error if a cycle is found.
    </para></listitem>
 
-   <listitem><para> A module <literal>M</literal> that is 
+   <listitem><para> A module <literal>M</literal> that is
    <literal>{-# SOURCE #-}</literal>-imported in a program will usually also be
    ordinarily imported elsewhere.  If not, <command>ghc --make</command>
    automatically adds <literal>M</literal> to the set of modules it tries to
@@ -830,9 +812,9 @@
 <para>A hs-boot file is written in a subset of Haskell:
 <itemizedlist>
 <listitem><para> The module header (including the export list), and import statements, are exactly as in
-Haskell, and so are the scoping rules.  
+Haskell, and so are the scoping rules.
    Hence, to mention a non-Prelude type or class, you must import it.</para></listitem>
-   
+
 <listitem><para> There must be no value declarations, but there can be type signatures for
 values.  For example:
 <programlisting>
@@ -841,7 +823,7 @@
 </para></listitem>
 <listitem><para> Fixity declarations are exactly as in Haskell.</para></listitem>
 <listitem><para> Type synonym declarations are exactly as in Haskell.</para></listitem>
-<listitem><para> A data type declaration can either be given in full, exactly as in Haskell, or it 
+<listitem><para> A data type declaration can either be given in full, exactly as in Haskell, or it
 can be given abstractly, by omitting the '=' sign and everything that follows.  For example:
 <programlisting>
   data T a b
@@ -853,7 +835,7 @@
 	  You <emphasis>can</emphasis> also write out the constructors but, if you do so, you must write
 	  it out precisely as in its real definition.</para>
 	  <para>
-	    If you do not write out the constructors, you may need to give a kind 
+	    If you do not write out the constructors, you may need to give a kind
 	    annotation (<xref linkend="kinding"/>), to tell
 	    GHC the kind of the type variable, if it is not "*".  (In source files, this is worked out
 	    from the way the type variable is used in the constructors.)  For example:
@@ -956,7 +938,7 @@
       brought up to date.  To bring it up to date,
       <literal>make</literal> looks for a rule to do so; one of the
       preceding suffix rules does the job nicely.  These dependencies
-      can be generated automatically by <command>ghc</command>; see 
+      can be generated automatically by <command>ghc</command>; see
       <xref linkend="makefile-dependencies"/></para>
 
  </sect2>
@@ -985,7 +967,7 @@
         <filename>Makefile</filename>.</para>
 
 	<para>In general, <command>ghc -M Foo</command> does the following.
-	For each module <literal>M</literal> in the set 
+	For each module <literal>M</literal> in the set
 	<literal>Foo</literal> plus all its imports (transitively),
 	it adds to the Makefile:
 	<itemizedlist>
@@ -1008,7 +990,7 @@
        (See <xref linkend="mutual-recursion"/> for details of
        <literal>hi-boot</literal> style interface files.)
       </para></listitem>
-        </itemizedlist> 
+        </itemizedlist>
 	If <literal>M</literal> imports multiple modules, then there will
        be multiple lines with <filename>M.o</filename> as the
        target.</para>
@@ -1145,7 +1127,7 @@
 be a disaster in practice, so GHC tries to be clever. </para>
 
 <para>In particular, if an instance declaration is in the same module as the definition
-of any type or class mentioned in the <emphasis>head</emphasis> of the instance declaration 
+of any type or class mentioned in the <emphasis>head</emphasis> of the instance declaration
 (the part after the &ldquo;<literal>=&gt;</literal>&rdquo;; see <xref linkend="instance-rules"/>), then
 GHC has to visit that interface file anyway.  Example:</para>
 <programlisting>
@@ -1196,8 +1178,8 @@
   least one <emphasis>orphan rule</emphasis>.</para> </listitem>
 
   <listitem><para> An instance declaration in a module M is an <emphasis>orphan instance</emphasis> if
-  <indexterm><primary>orphan instance</primary></indexterm> 
-<itemizedlist> 
+  <indexterm><primary>orphan instance</primary></indexterm>
+<itemizedlist>
 <listitem><para>
   The class of the instance declaration is not declared in M, and
 </para></listitem>
@@ -1209,7 +1191,7 @@
 	</para></listitem>
   </itemizedlist>
   </para>
-  <para> Only the instance head 
+  <para> Only the instance head
   counts.  In the example above, it is not good enough for C's declaration
   to be in module A; it must be the declaration of D or T.</para>
   </listitem>
@@ -1223,9 +1205,9 @@
 
 
 
-<para>If you use the flag <option>-fwarn-orphans</option>, GHC will warn you 
+<para>If you use the flag <option>-fwarn-orphans</option>, GHC will warn you
 if you are creating an orphan module.
-Like any warning, you can switch the warning off with <option>-fno-warn-orphans</option>, 
+Like any warning, you can switch the warning off with <option>-fno-warn-orphans</option>,
 and <option>-Werror</option>
 will make the compilation fail if the warning is issued.
 </para>
diff -dur 7.0.4-original//shared_libs.xml original/shared_libs.xml
--- 7.0.4-original//shared_libs.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/shared_libs.xml	2011-08-08 01:10:05.000000000 +0800
@@ -113,8 +113,8 @@
       Building Haskell code into a shared library is a good way to include
       Haskell code in a larger mixed-language project. While with static
       linking it is recommended to use GHC to perform the final link step,
-      with shared libaries a Haskell library can be treated just like any
-      other shared libary. The linking can be done using the normal system C
+      with shared libraries a Haskell library can be treated just like any
+      other shared library. The linking can be done using the normal system C
       compiler or linker.
     </para>
     <para>
@@ -138,7 +138,7 @@
       package. The <literal>-fPIC</literal> flag is required for all code
       that will end up in a shared library. The <literal>-shared</literal>
       flag specifies to make a shared library rather than a program. To make
-      this clearer we can break this down into separate compliation and link
+      this clearer we can break this down into separate compilation and link
       steps:
 <programlisting>
 ghc -dynamic -fPIC -c Foo.hs
@@ -179,7 +179,7 @@
       is to use a "runtime path" or "rpath" embedded into programs and
       libraries themselves. These paths can either be absolute paths or on at
       least Linux and Solaris they can be paths relative to the program or
-      libary itself. In principle this makes it possible to construct fully
+      library itself. In principle this makes it possible to construct fully
       relocatable sets of programs and libraries.
     </para>
     <para>
diff -dur 7.0.4-original//sooner.xml original/sooner.xml
--- 7.0.4-original//sooner.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/sooner.xml	2011-08-08 01:10:05.000000000 +0800
@@ -163,18 +163,6 @@
       </varlistentry>
 
       <varlistentry>
-	<term>Compile via C and crank up GCC:</term>
-	<listitem>
-	  <para>The native code-generator is designed to be quick, not
-          mind-bogglingly clever.  Better to let GCC have a go, as it
-          tries much harder on register allocation, etc.</para>
-
-	  <para>So, when we want very fast code, we use: <option>-O
-	  -fvia-C</option>.</para>
-	</listitem>
-      </varlistentry>
-
-      <varlistentry>
 	<term>Overloaded functions are not your friend:</term>
 	<listitem>
 	  <para>Haskell's overloading (using type classes) is elegant,
diff -dur 7.0.4-original//ug-book.xml original/ug-book.xml
--- 7.0.4-original//ug-book.xml	2011-06-15 21:01:20.000000000 +0800
+++ original/ug-book.xml	2011-08-15 14:59:40.000000000 +0800
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="iso-8859-1"?>
 <bookinfo>
-<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.0.4</title>
+<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.2.1</title>
 <author><othername>The GHC Team</othername></author>
 <address>
 <email>glasgow-haskell-&lcub;bugs,users&rcub;-request@haskell.org</email>
7.0.4-original/だけに発見: users_guide
7.0.4-original/だけに発見: users_guide.xml
diff -dur 7.0.4-original//using.xml original/using.xml
--- 7.0.4-original//using.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/using.xml	2011-08-08 01:10:05.000000000 +0800
@@ -78,7 +78,7 @@
 
   <sect1>
     <title>Options overview</title>
-    
+
     <para>GHC's behaviour is controlled by
     <firstterm>options</firstterm>, which for historical reasons are
     also sometimes referred to as command-line flags or arguments.
@@ -86,11 +86,11 @@
 
     <sect2>
       <title>Command-line arguments</title>
-      
+
       <indexterm><primary>structure, command-line</primary></indexterm>
       <indexterm><primary>command-line</primary><secondary>arguments</secondary></indexterm>
       <indexterm><primary>arguments</primary><secondary>command-line</secondary></indexterm>
-      
+
       <para>An invocation of GHC takes the following form:</para>
 
 <screen>
@@ -112,7 +112,7 @@
 
     <sect2 id="source-file-options">
       <title>Command line options in source files</title>
-    
+
       <indexterm><primary>source-file options</primary></indexterm>
 
       <para>Sometimes it is useful to make the connection between a
@@ -130,7 +130,7 @@
 module X where
 ...
 </programlisting>
-      
+
       <para><literal>OPTIONS_GHC</literal> is a <emphasis>file-header pragma</emphasis>
       (see <xref linkend="pragmas"/>).</para>
 
@@ -163,7 +163,7 @@
       for more details.</para>
     </sect2>
   </sect1>
-    
+
   <sect1 id="static-dynamic-flags">
     <title>Static, Dynamic, and Mode options</title>
     <indexterm><primary>static</primary><secondary>options</secondary>
@@ -204,14 +204,14 @@
 	</listitem>
       </varlistentry>
     </variablelist>
-    
+
     <para>The flag reference tables (<xref
     linkend="flag-reference"/>) lists the status of each flag.</para>
 
     <para>There are a few flags that are static except that they can
     also be used with GHCi's <literal>:set</literal> command; these
     are listed as &ldquo;static/<literal>:set</literal>&rdquo; in the
-    table.</para> 
+    table.</para>
   </sect1>
 
   <sect1 id="file-suffixes">
@@ -266,7 +266,7 @@
 	  compiler.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term><filename>.ll</filename></term>
 	<listitem>
@@ -336,7 +336,7 @@
 	  more detail in <xref linkend="ghci"/>.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term>
 	  <cmdsynopsis><command>ghc &ndash;&ndash;make</command>
@@ -375,7 +375,7 @@
 	  more details.</para>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term>
           <cmdsynopsis>
@@ -531,7 +531,7 @@
       <title>Using <command>ghc</command> <option>&ndash;&ndash;make</option></title>
       <indexterm><primary><option>&ndash;&ndash;make</option></primary></indexterm>
       <indexterm><primary>separate compilation</primary></indexterm>
-      
+
       <para>In this mode, GHC will build a multi-module Haskell program by following
       dependencies from one or more root modules (usually just
       <literal>Main</literal>).  For example, if your
@@ -583,7 +583,7 @@
 	  source.</para>
 	</listitem>
       </itemizedlist>
-      
+
       <para>Any of the command-line options described in the rest of
       this chapter can be used with
       <option>&ndash;&ndash;make</option>, but note that any options
@@ -596,7 +596,7 @@
       (say, some auxiliary C code), then the object files can be
       given on the command line and GHC will include them when linking
       the executable.</para>
-      
+
       <para>Note that GHC can only follow dependencies if it has the
       source file available, so if your program includes a module for
       which there is no source file, even if you have an object and an
@@ -609,7 +609,7 @@
       to add directories to the search path (see <xref
       linkend="search-path"/>).</para>
     </sect2>
-  
+
     <sect2 id="eval-mode">
       <title>Expression evaluation mode</title>
 
@@ -633,7 +633,7 @@
 <screen>
 ghc -e Main.main Main.hs
 </screen>
-      
+
       <para>or we can just use this mode to evaluate expressions in
       the context of the <literal>Prelude</literal>:</para>
 
@@ -646,22 +646,22 @@
 
     <sect2 id="options-order">
       <title>Batch compiler mode</title>
-      
+
       <para>In <emphasis>batch mode</emphasis>, GHC will compile one or more source files
       given on the command line.</para>
-      
+
       <para>The first phase to run is determined by each input-file
       suffix, and the last phase is determined by a flag.  If no
       relevant flag is present, then go all the way through to linking.
       This table summarises:</para>
-      
+
       <informaltable>
 	<tgroup cols="4">
 	  <colspec align="left"/>
 	  <colspec align="left"/>
 	  <colspec align="left"/>
 	  <colspec align="left"/>
-	  
+
 	  <thead>
 	    <row>
 	      <entry>Phase of the compilation system</entry>
@@ -677,7 +677,7 @@
 	      <entry>-</entry>
 	      <entry><literal>.hs</literal></entry>
 	    </row>
-	    
+
 	    <row>
 	      <entry>C pre-processor (opt.) </entry>
 	      <entry><literal>.hs</literal> (with
@@ -685,28 +685,28 @@
 	      <entry><option>-E</option></entry>
 	      <entry><literal>.hspp</literal></entry>
 	    </row>
-	    
+
 	    <row>
 	      <entry>Haskell compiler</entry>
 	      <entry><literal>.hs</literal></entry>
 	      <entry><option>-C</option>, <option>-S</option></entry>
 	      <entry><literal>.hc</literal>, <literal>.s</literal></entry>
 	    </row>
-	    
+
 	    <row>
 	      <entry>C compiler (opt.)</entry>
 	      <entry><literal>.hc</literal> or <literal>.c</literal></entry>
 	      <entry><option>-S</option></entry>
 	      <entry><literal>.s</literal></entry>
 	    </row>
-	    
+
 	    <row>
 	      <entry>assembler</entry>
 	      <entry><literal>.s</literal></entry>
 	      <entry><option>-c</option></entry>
 	      <entry><literal>.o</literal></entry>
 	    </row>
-	    
+
 	    <row>
 	      <entry>linker</entry>
 	      <entry><replaceable>other</replaceable></entry>
@@ -716,17 +716,17 @@
 	  </tbody>
 	</tgroup>
       </informaltable>
-      
+
       <indexterm><primary><option>-C</option></primary></indexterm>
       <indexterm><primary><option>-E</option></primary></indexterm>
       <indexterm><primary><option>-S</option></primary></indexterm>
       <indexterm><primary><option>-c</option></primary></indexterm>
-      
+
       <para>Thus, a common invocation would be: </para>
 
 <screen>
 ghc -c Foo.hs</screen>
-      
+
       <para>to compile the Haskell source file
       <filename>Foo.hs</filename> to an object file
       <filename>Foo.o</filename>.</para>
@@ -741,7 +741,7 @@
       <option>-cpp</option><indexterm><primary><option>-cpp</option></primary></indexterm>
       flag turns it on.  See <xref linkend="c-pre-processor"/> for more
       details.</para>
-      
+
       <para>Note: The option <option>-E</option><indexterm><primary>-E
       option</primary></indexterm> runs just the pre-processing passes
       of the compiler, dumping the result in a file.</para>
@@ -783,18 +783,6 @@
     <variablelist>
       <varlistentry>
 	<term>
-          <option>-n</option>
-          <indexterm><primary><option>-n</option></primary></indexterm>
-        </term>
-	<listitem>
-	  <para>Does a dry-run, i.e. GHC goes through all the motions
-          of compiling as normal, but does not actually run any
-          external commands.</para>
-	</listitem>
-      </varlistentry>
-
-      <varlistentry>
-	<term>
           <option>-v</option>
           <indexterm><primary><option>-v</option></primary></indexterm>
         </term>
@@ -812,7 +800,7 @@
           verify.</para>
 	</listitem>
       </varlistentry>
-	
+
       <varlistentry>
 	<term>
           <option>-v</option><replaceable>n</replaceable>
@@ -824,7 +812,7 @@
 	  argument.  Specifying <option>-v</option> on its own is
 	  equivalent to <option>-v3</option>, and the other levels
 	  have the following meanings:</para>
-	  
+
 	  <variablelist>
 	    <varlistentry>
 	      <term><option>-v0</option></term>
@@ -874,7 +862,7 @@
 	  </variablelist>
 	</listitem>
       </varlistentry>
-      
+
       <varlistentry>
 	<term><option>-ferror-spans</option>
           <indexterm><primary><option>-ferror-spans</option></primary>
@@ -990,9 +978,11 @@
 	  <emphasis>not</emphasis> enabled by <option>-Wall</option>
 	  are
             <option>-fwarn-tabs</option>,
+            <option>-fwarn-incomplete-uni-patterns</option>,
             <option>-fwarn-incomplete-record-updates</option>,
             <option>-fwarn-monomorphism-restriction</option>,
-            <option>-fwarn-unused-do-bind</option>, and
+            <option>-fwarn-unrecognised-pragmas</option>,
+            <option>-fwarn-auto-orphans</option>,
             <option>-fwarn-implicit-prelude</option>.</para>
 	</listitem>
       </varlistentry>
@@ -1010,7 +1000,7 @@
 	<term><option>-Werror</option>:</term>
 	<listitem>
 	  <indexterm><primary><option>-Werror</option></primary></indexterm>
-	  <para>Makes any warning into a fatal error. Useful so that you don't 
+	  <para>Makes any warning into a fatal error. Useful so that you don't
 	    miss warnings when doing batch compilation. </para>
 	</listitem>
       </varlistentry>
@@ -1175,6 +1165,21 @@
       </varlistentry>
 
       <varlistentry>
+        <term><option>-fwarn-identities</option>:</term>
+	<listitem>
+          <indexterm><primary><option>-fwarn-identities</option></primary></indexterm>
+          <para>Causes the compiler to emit a warning when a Prelude numeric
+            conversion converts a type T to the same type T; such calls
+            are probably no-ops and can be omitted.  The functions checked for
+            are: <literal>toInteger</literal>,
+            <literal>toRational</literal>,
+            <literal>fromIntegral</literal>,
+            and <literal>realToFrac</literal>.
+          </para>
+	</listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term><option>-fwarn-implicit-prelude</option>:</term>
         <listitem>
           <indexterm><primary><option>-fwarn-implicit-prelude</option></primary></indexterm>
@@ -1200,27 +1205,41 @@
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-incomplete-patterns</option>:</term>
+	<term><option>-fwarn-incomplete-patterns</option>,
+              <option>-fwarn-incomplete-uni-patterns</option>:
+        </term>
 	<listitem>
 	  <indexterm><primary><option>-fwarn-incomplete-patterns</option></primary></indexterm>
+	  <indexterm><primary><option>-fwarn-incomplete-uni-patterns</option></primary></indexterm>
 	  <indexterm><primary>incomplete patterns, warning</primary></indexterm>
 	  <indexterm><primary>patterns, incomplete</primary></indexterm>
 
-          <para>Similarly for incomplete patterns, the functions
-          <function>g</function> and <function>h</function> below will fail when applied to
+          <para>The option <option>-fwarn-incomplete-patterns</option> warns
+            about places where
+	    a pattern-match might fail at runtime.
+          The function
+          <function>g</function> below will fail when applied to
           non-empty lists, so the compiler will emit a warning about
           this when <option>-fwarn-incomplete-patterns</option> is
-          enabled.</para>
-
+          enabled.
 <programlisting>
 g [] = 2
-h = \[] -> 2
 </programlisting>
-
-	  <para>This option isn't enabled by default because it can be
+	  This option isn't enabled by default because it can be
           a bit noisy, and it doesn't always indicate a bug in the
           program.  However, it's generally considered good practice
-          to cover all the cases in your functions.</para>
+          to cover all the cases in your functions, and it is switched
+          on by <option>-W</option>.</para>
+
+          <para>The flag <option>-fwarn-incomplete-uni-patterns</option> is
+          similar, except that it
+          applies only to lambda-expressions and pattern bindings, constructs
+	  that only allow a single pattern:
+<programlisting>
+h = \[] -> 2
+Just k = f y
+</programlisting>
+          </para>
 	</listitem>
       </varlistentry>
 
@@ -1269,6 +1288,39 @@
       </varlistentry>
 
       <varlistentry>
+	<term>
+          <option>-fwarn-missing-import-lists</option>:
+	  <indexterm><primary><option>-fwarn-import-lists</option></primary></indexterm>
+	  <indexterm><primary>missing import lists, warning</primary></indexterm>
+	  <indexterm><primary>import lists, missing</primary></indexterm>
+        </term>
+	<listitem>
+
+	  <para>This flag warns if you use an unqualified
+            <literal>import</literal> declaration
+	    that does not explicitly list the entities brought into scope. For
+	    example
+      </para>
+<programlisting>
+module M where
+  import X( f )
+  import Y
+  import qualified Z
+  p x = f x x
+</programlisting>
+        <para>
+          The <option>-fwarn-import-lists</option> flag will warn about the import
+	  of <literal>Y</literal> but not <literal>X</literal>
+	  If module <literal>Y</literal> is later changed to export (say) <literal>f</literal>,
+          then the reference to <literal>f</literal> in <literal>M</literal> will become
+	  ambiguous.  No warning is produced for the import of <literal>Z</literal>
+	  because extending <literal>Z</literal>'s exports would be unlikely to produce
+	  ambiguity in <literal>M</literal>.
+        </para>
+	</listitem>
+      </varlistentry>
+
+      <varlistentry>
 	<term><option>-fwarn-missing-methods</option>:</term>
 	<listitem>
 	  <indexterm><primary><option>-fwarn-missing-methods</option></primary></indexterm>
@@ -1287,7 +1339,7 @@
 	        complexFn :: a -> a -> String
 	        complexFn x y = ... _simpleFn ...
 	      </programlisting>
-	    The idea is that: (a) users of the class will only call <literal>complexFn</literal>; 
+	    The idea is that: (a) users of the class will only call <literal>complexFn</literal>;
 	    never <literal>_simpleFn</literal>; and (b)
 	    instance declarations can define either <literal>complexFn</literal> or <literal>_simpleFn</literal>.
 	    </para>
@@ -1309,11 +1361,25 @@
       </varlistentry>
 
       <varlistentry>
+	<term><option>-fwarn-missing-local-sigs</option>:</term>
+	<listitem>
+	  <indexterm><primary><option>-fwarn-missing-local-sigs</option></primary></indexterm>
+	  <indexterm><primary>type signatures, missing</primary></indexterm>
+
+	  <para>If you use the
+          <option>-fwarn-missing-local-sigs</option> flag GHC will warn
+          you about any polymorphic local bindings. As part of
+	    the warning GHC also reports the inferred type. The
+          option is off by default.</para>
+	</listitem>
+      </varlistentry>
+
+      <varlistentry>
 	<term><option>-fwarn-name-shadowing</option>:</term>
 	<listitem>
 	  <indexterm><primary><option>-fwarn-name-shadowing</option></primary></indexterm>
 	  <indexterm><primary>shadowing, warning</primary></indexterm>
-	  
+
 	  <para>This option causes a warning to be emitted whenever an
           inner-scope value has the same name as an outer-scope value,
           i.e. the inner value shadows the outer one.  This can catch
@@ -1334,8 +1400,8 @@
 	  <indexterm><primary><option>-fwarn-orphans</option></primary></indexterm>
 	  <indexterm><primary>orphan instances, warning</primary></indexterm>
 	  <indexterm><primary>orphan rules, warning</primary></indexterm>
-	  
-	  <para>This option causes a warning to be emitted whenever the 
+
+	  <para>This option causes a warning to be emitted whenever the
 	    module contains an "orphan" instance declaration or rewrite rule.
 	    An instance declaration is an orphan if it appears in a module in
 	    which neither the class nor the type being instanced are declared
@@ -1344,7 +1410,7 @@
 	  orphans is called an orphan module.</para>
 	  <para>The trouble with orphans is that GHC must pro-actively read the interface
 	    files for all orphan modules, just in case their instances or rules
-	    play a role, whether or not the module's interface would otherwise 
+	    play a role, whether or not the module's interface would otherwise
 	    be of any use.  See <xref linkend="orphan-modules"/> for details.
             </para>
 	</listitem>
@@ -1432,8 +1498,8 @@
           which are unused.  For top-level functions, the warning is
           only given if the binding is not exported.</para>
 	  <para>A definition is regarded as "used" if (a) it is exported, or (b) it is
-	    mentioned in the right hand side of another definition that is used, or (c) the 
-	    function it defines begins with an underscore.  The last case provides a 
+	    mentioned in the right hand side of another definition that is used, or (c) the
+	    function it defines begins with an underscore.  The last case provides a
 	    way to suppress unused-binding warnings selectively.  </para>
 	  <para> Notice that a variable
 	    is reported as unused even if it appears in the right-hand side of another
@@ -1481,7 +1547,7 @@
 	  <indexterm><primary>unused do binding, warning</primary></indexterm>
 	  <indexterm><primary>do binding, unused</primary></indexterm>
 
-	  <para>Report expressions occuring in <literal>do</literal> and <literal>mdo</literal> blocks
+	  <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
 	  that appear to silently throw information away.
           For instance <literal>do { mapM popInt xs ; return 10 }</literal> would report
           the first statement in the <literal>do</literal> block as suspicious,
@@ -1506,7 +1572,7 @@
 	  <indexterm><primary>apparently erroneous do binding, warning</primary></indexterm>
 	  <indexterm><primary>do binding, apparently erroneous</primary></indexterm>
 
-	  <para>Report expressions occuring in <literal>do</literal> and <literal>mdo</literal> blocks
+	  <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
 	  that appear to lack a binding.
           For instance <literal>do { return (popInt 10) ; return 10 }</literal> would report
           the first statement in the <literal>do</literal> block as suspicious,
@@ -1632,37 +1698,12 @@
             <option>-O</option>.</para>
 	  </listitem>
 	</varlistentry>
-
-	<varlistentry>
-	  <term>
-            <option>-Ofile &lt;file&gt;</option>:
-            <indexterm><primary>-Ofile &lt;file&gt; option</primary></indexterm>
-            <indexterm><primary>optimising, customised</primary></indexterm>
-          </term>
-	  <listitem>
-	    <para>(NOTE: not supported since GHC 4.x.  Please ask if
-	    you're interested in this.)</para>
-	    
-	    <para>For those who need <emphasis>absolute</emphasis>
-            control over <emphasis>exactly</emphasis> what options are
-            used (e.g., compiler writers, sometimes :-), a list of
-            options can be put in a file and then slurped in with
-            <option>-Ofile</option>.</para>
-
-	    <para>In that file, comments are of the
-            <literal>&num;</literal>-to-end-of-line variety; blank
-            lines and most whitespace is ignored.</para>
-
-	    <para>Please ask if you are baffled and would like an
-	    example of <option>-Ofile</option>!</para>
-	  </listitem>
-	</varlistentry>
       </variablelist>
 
       <para>We don't use a <option>-O*</option> flag for day-to-day
       work.  We use <option>-O</option> to get respectable speed;
       e.g., when we want to measure something.  When we want to go for
-      broke, we tend to use <option>-O2 -fvia-C</option> (and we go for
+      broke, we tend to use <option>-O2</option> (and we go for
       lots of coffee breaks).</para>
 
       <para>The easiest way to see what <option>-O</option> (etc.)
@@ -1817,7 +1858,7 @@
 	      <literal>State#</literal> token as argument is considered to be
 	      single-entry, hence it is considered OK to inline things inside
 	      it.  This can improve performance of IO and ST monad code, but it
-	    runs the risk of reducing sharing.</para> 
+	    runs the risk of reducing sharing.</para>
 	  </listitem>
 	</varlistentry>
 
@@ -1881,10 +1922,10 @@
 	    <indexterm><primary>unfolding, controlling</primary></indexterm>
           </term>
 	  <listitem>
-	    <para>(Default: 45) Governs the maximum size that GHC will 
+	    <para>(Default: 45) Governs the maximum size that GHC will
             allow a function unfolding to be.   (An unfolding has a
             &ldquo;size&rdquo; that reflects the cost in terms of
-            &ldquo;code bloat&rdquo; of expanding that unfolding at
+            &ldquo;code bloat&rdquo; of expanding that unfolding
             at a call site. A bigger function would be assigned a
             bigger cost.) </para>
 
@@ -1918,10 +1959,10 @@
       </variablelist>
 
     </sect2>
-    
+
   </sect1>
-  
-  &phases;  
+
+  &phases;
 
   &shared_libs;
 
@@ -1981,7 +2022,7 @@
       use GHC to compile and run parallel programs, in <xref
 	linkend="lang-parallel" /> we describe the language features that affect
     parallelism.</para>
-    
+
     <sect2 id="parallel-compile-options">
       <title>Compile-time options for SMP parallelism</title>
 
@@ -1989,7 +2030,7 @@
 	linked with the <option>-threaded</option> option (see <xref
 	  linkend="options-linker" />).  Additionally, the following
 	compiler options affect parallelism:</para>
-      
+
       <variablelist>
         <varlistentry>
           <term><option>-feager-blackholing</option></term>
@@ -2046,7 +2087,7 @@
 	          results you find.</para></footnote>.  For example,
 	      on a dual-core machine we would probably use
 	      <literal>+RTS -N2 -RTS</literal>.</para>
-	    
+
             <para>Omitting <replaceable>x</replaceable>,
               i.e. <literal>+RTS -N -RTS</literal>, lets the runtime
               choose the value of <replaceable>x</replaceable> itself
@@ -2106,28 +2147,9 @@
             </para>
           </listitem>
         </varlistentry>
-	<varlistentry>
-	  <term><option>-qw</option></term>
-          <indexterm><primary><option>-qw</option></primary><secondary>RTS
-          option</secondary></indexterm>
-	  <listitem>
-            <para>Migrate a thread to the current CPU when it is woken
-            up.  Normally when a thread is woken up after being
-            blocked it will be scheduled on the CPU it was running on
-            last; this option allows the thread to immediately migrate
-            to the CPU that unblocked it.</para> 
- 
-            <para>The rationale for allowing this eager migration is
-            that it tends to move threads that are communicating with
-            each other onto the same CPU; however there are
-            pathalogical situations where it turns out to be a poor
-            strategy.  Depending on the communication pattern in your
-            program, it may or may not be a good idea.</para>
-          </listitem>
-        </varlistentry>
        </variablelist>
     </sect2>
-      
+
     <sect2>
       <title>Hints for using SMP parallelism</title>
 
@@ -2183,27 +2205,6 @@
         </listitem>
       </varlistentry>
 
-      <varlistentry>
-	<term><option>-monly-[32]-regs</option>:</term>
-	<listitem>
-	  <para>(x86 only)<indexterm><primary>-monly-N-regs
-          option (iX86 only)</primary></indexterm> GHC tries to
-          &ldquo;steal&rdquo; four registers from GCC, for performance
-          reasons; it almost always works.  However, when GCC is
-          compiling some modules with four stolen registers, it will
-          crash, probably saying:
-
-<screen>
-Foo.hc:533: fixed or forbidden register was spilled.
-This may be due to a compiler bug or to impossible asm
-statements or clauses.
-</screen>
-
-          Just give some registers back with
-          <option>-monly-N-regs</option>.  Try `3' first, then `2'.
-          If `2' doesn't work, please report the bug to us.</para>
-	</listitem>
-      </varlistentry>
     </variablelist>
 
   </sect1>
@@ -2215,14 +2216,14 @@
 
   <indexterm><primary>intermediate code generation</primary></indexterm>
 
-  <para>GHC can dump its optimized intermediate code (said to be in &ldquo;Core&rdquo; format) 
+  <para>GHC can dump its optimized intermediate code (said to be in &ldquo;Core&rdquo; format)
   to a file as a side-effect of compilation. Non-GHC back-end tools can read and process Core files; these files have the suffix
   <filename>.hcr</filename>. The Core format is described in <ulink url="../../core.pdf">
-  <citetitle>An External Representation for the GHC Core Language</citetitle></ulink>, 
+  <citetitle>An External Representation for the GHC Core Language</citetitle></ulink>,
   and sample tools
   for manipulating Core files (in Haskell) are available in the
   <ulink url="http://hackage.haskell.org/package/extcore">extcore package on Hackage</ulink>.  Note that the format of <literal>.hcr</literal>
-  files is <emphasis>different</emphasis> from the Core output format that GHC generates 
+  files is <emphasis>different</emphasis> from the Core output format that GHC generates
   for debugging purposes (<xref linkend="options-debugging"/>), though the two formats appear somewhat similar.</para>
 
   <para>The Core format natively supports notes which you can add to
7.0.4-original/だけに発見: what_glasgow_exts_does.gen.xml
diff -dur 7.0.4-original//win32-dlls.xml original/win32-dlls.xml
--- 7.0.4-original//win32-dlls.xml	2011-06-14 01:10:05.000000000 +0800
+++ original/win32-dlls.xml	2011-08-08 01:10:05.000000000 +0800
@@ -23,7 +23,7 @@
 <!-- not clear whether there are current editions of Win32 OSes that
      doesn't do this by default.
 
-<para> Solution: don't use "Open With...", avoid spaces in file names, 
+<para> Solution: don't use "Open With...", avoid spaces in file names,
 or fiddle with the appropriate registry setting:
 <programlisting>
   HKEY_CLASSES_ROOT\Unknown\shell\openas\command
@@ -152,7 +152,7 @@
 normal windows program - neither GHC nor the executables it produces
 are aware of cygwin's pretended unix hierarchy. GHC will happily
 accept either '/' or '\' as path separators, but it won't know where
-to find <filename>/home/joe/Main.hs</filename> or <filename>/bin/bash</filename> 
+to find <filename>/home/joe/Main.hs</filename> or <filename>/bin/bash</filename>
 or the like. This causes all
 kinds of fun when GHC is used from within cygwin's bash, or in
 make-sessions running under cygwin.
@@ -162,9 +162,9 @@
 <sect2><title>Things to do</title>
 <itemizedlist>
 <listitem>
-<para> Don't use absolute paths in make, configure &amp; co if there is any chance 
+<para> Don't use absolute paths in make, configure &amp; co if there is any chance
   that those might be passed to GHC (or to GHC-compiled programs). Relative
-  paths are fine because cygwin tools are happy with them and GHC accepts 
+  paths are fine because cygwin tools are happy with them and GHC accepts
   '/' as path-separator. And relative paths don't depend on where cygwin's
   root directory is located, or on which partition or network drive your source
   tree happens to reside, as long as you 'cd' there first.
@@ -175,25 +175,25 @@
   <literal>ROOT=`pwd`</literal> in makefile hierarchies or configure scripts), cygwin provides
   a tool called <command>cygpath</command> that can convert cygwin's unix-style paths to their
   actual windows-style counterparts. Many cygwin tools actually accept
-  absolute windows-style paths (remember, though, that you either need 
-  to escape '\' or convert '\' to '/'), so you should be fine just using those 
-  everywhere. If you need to use tools that do some kind of path-mangling 
-  that depends on unix-style paths (one fun example is trying to interpret ':' 
-  as a separator in path lists..), you can still try to convert paths using 
+  absolute windows-style paths (remember, though, that you either need
+  to escape '\' or convert '\' to '/'), so you should be fine just using those
+  everywhere. If you need to use tools that do some kind of path-mangling
+  that depends on unix-style paths (one fun example is trying to interpret ':'
+  as a separator in path lists..), you can still try to convert paths using
   <command>cygpath</command> just before they are passed to GHC and friends.
 </para></listitem>
-  
+
 <listitem>
 <para> If you don't have <command>cygpath</command>, you probably don't have cygwin and hence
   no problems with it... unless you want to write one build process for several
   platforms. Again, relative paths are your friend, but if you have to use
   absolute paths, and don't want to use different tools on different platforms,
   you can simply write a short Haskell program to print the current directory
-   (thanks to George Russell for this idea): compiled with GHC, this will give 
-  you the view of the file system that GHC depends on (which will differ 
+   (thanks to George Russell for this idea): compiled with GHC, this will give
+  you the view of the file system that GHC depends on (which will differ
   depending on whether GHC is compiled with cygwin's gcc or mingw's
-  gcc or on a real unix system..) - that little program can also deal with 
-  escaping '\' in paths. Apart from the banner and the startup time, 
+  gcc or on a real unix system..) - that little program can also deal with
+  escaping '\' in paths. Apart from the banner and the startup time,
   something like this would also do:
 <programlisting>
   $ echo "Directory.getCurrentDirectory >>= putStrLn . init . tail . show " | ghci
@@ -258,7 +258,7 @@
 The default on Win32 platforms is to link applications in such a way
 that the executables will use the Prelude and system libraries DLLs,
 rather than contain (large chunks of) them. This is transparent at the
-command-line, so 
+command-line, so
 </para>
 
 <para>
@@ -273,7 +273,7 @@
 -rwxr-xr-x   1 544      everyone     4608 May  3 17:11 main.exe*
 sh$ ./main
 hello, world!
-sh$ 
+sh$
 </screen>
 </para>
 
@@ -447,8 +447,6 @@
 // StartEnd.c
 #include &lt;Rts.h&gt;
 
-extern void __stginit_Adder(void);
-
 void HsStart()
 {
    int argc = 1;
@@ -457,9 +455,6 @@
    // Initialize Haskell runtime
    char** args = argv;
    hs_init(&amp;argc, &amp;args);
-
-   // Tell Haskell about all root modules
-   hs_add_root(__stginit_Adder);
 }
 
 void HsEnd()
